<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Outputs\BaseTarget.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Outputs\BaseTarget.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Tue Mar 07 00:28:33 2017
<BR><P>
<H3>Maximum Stack Usage =        296 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
RunMasterSM &rArr;  RunMasterSM (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[28]">Reset_Handler</a>
 <LI><a href="#[57]">__user_initial_stackheap</a>
 <LI><a href="#[3]">NmiSR</a>
 <LI><a href="#[4]">FaultISR</a>
 <LI><a href="#[5]">IntDefaultHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[21]">RunLOC_SM</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">RunLOC_SM</a><BR>
 <LI><a href="#[88]">RunByteTransferSM</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[88]">RunByteTransferSM</a><BR>
 <LI><a href="#[1f]">RunMasterSM</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">RunMasterSM</a><BR>
 <LI><a href="#[a2]">RunShootingSM</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a2]">RunShootingSM</a><BR>
 <LI><a href="#[9d]">RunDrivingAlongTapeSM</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9d]">RunDrivingAlongTapeSM</a><BR>
 <LI><a href="#[5c]">RunConstructingSM</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5c]">RunConstructingSM</a><BR>
 <LI><a href="#[8a]">RunCheckInSM</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8a]">RunCheckInSM</a><BR>
 <LI><a href="#[be]">UARTCharPut</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[be]">UARTCharPut</a><BR>
 <LI><a href="#[3]">NmiSR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">NmiSR</a><BR>
 <LI><a href="#[4]">FaultISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">FaultISR</a><BR>
 <LI><a href="#[5]">IntDefaultHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">IntDefaultHandler</a><BR>
 <LI><a href="#[45]">SysCtlDelay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[45]">SysCtlDelay</a><BR>
 <LI><a href="#[44]">_sys_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[44]">_sys_exit</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[8]">Beacon_Receiver_ISR</a> from hardware.o(i.Beacon_Receiver_ISR) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[11]">Check4Keystroke</a> from eventcheckers.o(i.Check4Keystroke) referenced from es_checkevents_1.o(.constdata)
 <LI><a href="#[12]">CheckBumpSwitchEvents</a> from bumpswitchdebounce.o(i.CheckBumpSwitchEvents) referenced from es_checkevents_1.o(.constdata)
 <LI><a href="#[13]">CheckTeamSwitchEvents</a> from teamswitchdebounce.o(i.CheckTeamSwitchEvents) referenced from es_checkevents_1.o(.constdata)
 <LI><a href="#[7]">EOT_Response_ISR</a> from spi_module.o(i.EOT_Response_ISR) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[4]">FaultISR</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[c]">HallEffectOneShotTimer_ISR</a> from constructingsm.o(i.HallEffectOneShotTimer_ISR) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[a]">HallEffect_ISR</a> from constructingsm.o(i.HallEffect_ISR) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[1c]">InitFiringService</a> from firingservice.o(i.InitFiringService) referenced from es_framework_1.o(.constdata)
 <LI><a href="#[20]">InitLOC_SM</a> from loc_hsm.o(i.InitLOC_SM) referenced from es_framework_1.o(.constdata)
 <LI><a href="#[14]">InitMapKeys</a> from mapkeys.o(i.InitMapKeys) referenced from es_framework_1.o(.constdata)
 <LI><a href="#[1e]">InitMasterSM</a> from masterhsm.o(i.InitMasterSM) referenced from es_framework_1.o(.constdata)
 <LI><a href="#[1a]">InitReloadingService</a> from reloadingservice.o(i.InitReloadingService) referenced from es_framework_1.o(.constdata)
 <LI><a href="#[18]">InitializeBumpSwitchDebounce</a> from bumpswitchdebounce.o(i.InitializeBumpSwitchDebounce) referenced from es_framework_1.o(.constdata)
 <LI><a href="#[16]">InitializeTeamSwitchDebounce</a> from teamswitchdebounce.o(i.InitializeTeamSwitchDebounce) referenced from es_framework_1.o(.constdata)
 <LI><a href="#[5]">IntDefaultHandler</a> from startup_rvmdk.o(RESET) referenced 106 times from startup_rvmdk.o(RESET)
 <LI><a href="#[d]">Launcher_Controller_ISR</a> from hardware.o(i.Launcher_Controller_ISR) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[9]">Launcher_Encoder_ISR</a> from hardware.o(i.Launcher_Encoder_ISR) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[b]">Motor_Controller_ISR</a> from hardware.o(i.Motor_Controller_ISR) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[3]">NmiSR</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[26]">PostBumpSwitchDebounce</a> from bumpswitchdebounce.o(i.PostBumpSwitchDebounce) referenced from es_timers_1.o(.constdata)
 <LI><a href="#[24]">PostFiringService</a> from firingservice.o(i.PostFiringService) referenced from es_timers_1.o(.constdata)
 <LI><a href="#[22]">PostLOC_SM</a> from loc_hsm.o(i.PostLOC_SM) referenced from es_timers_1.o(.constdata)
 <LI><a href="#[23]">PostMasterSM</a> from masterhsm.o(i.PostMasterSM) referenced 6 times from es_timers_1.o(.constdata)
 <LI><a href="#[25]">PostReloadingService</a> from reloadingservice.o(i.PostReloadingService) referenced from es_timers_1.o(.constdata)
 <LI><a href="#[27]">PostTeamSwitchDebounce</a> from teamswitchdebounce.o(i.PostTeamSwitchDebounce) referenced from es_timers_1.o(.constdata)
 <LI><a href="#[28]">Reset_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[19]">RunBumpSwitchDebounceSM</a> from bumpswitchdebounce.o(i.RunBumpSwitchDebounceSM) referenced from es_framework_1.o(.constdata)
 <LI><a href="#[1d]">RunFiringService</a> from firingservice.o(i.RunFiringService) referenced from es_framework_1.o(.constdata)
 <LI><a href="#[21]">RunLOC_SM</a> from loc_hsm.o(i.RunLOC_SM) referenced from es_framework_1.o(.constdata)
 <LI><a href="#[15]">RunMapKeys</a> from mapkeys.o(i.RunMapKeys) referenced from es_framework_1.o(.constdata)
 <LI><a href="#[1f]">RunMasterSM</a> from masterhsm.o(i.RunMasterSM) referenced from es_framework_1.o(.constdata)
 <LI><a href="#[1b]">RunReloadingService</a> from reloadingservice.o(i.RunReloadingService) referenced from es_framework_1.o(.constdata)
 <LI><a href="#[17]">RunTeamSwitchDebounceSM</a> from teamswitchdebounce.o(i.RunTeamSwitchDebounceSM) referenced from es_framework_1.o(.constdata)
 <LI><a href="#[6]">SysTickIntHandler</a> from es_port_1.o(i.SysTickIntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[e]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[10]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[f]">fputc</a> from retarget_1.o(i.fputc) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[28]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[29]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[2a]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2c]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[c3]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[c4]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2d]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[c5]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[2e]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[4b]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[30]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[31]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[c6]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[3d]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[33]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[c7]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[c8]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[35]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[c9]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[37]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[ca]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[cb]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[39]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[cc]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[cd]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[ce]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[cf]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[d0]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[d1]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[d2]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[d3]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[d4]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[d5]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[d6]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[d7]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[d8]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[d9]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[da]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[42]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[db]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[dc]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[dd]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[de]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[df]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[e0]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[e1]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[2b]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[e2]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[3a]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3c]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[e3]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[3e]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[e4]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[58]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[41]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[e5]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[43]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[45]"></a>SysCtlDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>

<P><STRONG><a name="[e6]"></a>CPUcpsid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[e7]"></a>CPUprimask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[83]"></a>CPUcpsie</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>

<P><STRONG><a name="[e8]"></a>CPUwfi</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[e9]"></a>CPUbasepriSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[ea]"></a>CPUbasepriGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[a9]"></a>rand</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMapKeys
</UL>

<P><STRONG><a name="[57]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[eb]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>toupper</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, toupper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMapKeys
</UL>

<P><STRONG><a name="[48]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMasterSM
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DuringConstructing
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMapKeys
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorController
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunShootingSM
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunDrivingAlongTapeSM
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunConstructingSM
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPeriodCode
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunCheckInSM
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunFiringService
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunReloadingService
</UL>

<P><STRONG><a name="[4a]"></a>__printf</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[52]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[2f]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[4d]"></a>getc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, getc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getc &rArr; fgetc &rArr; TERMIO_GetChar &rArr; UARTgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check4Keystroke
</UL>

<P><STRONG><a name="[4f]"></a>puts</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, puts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[50]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[36]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[ed]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>

<P><STRONG><a name="[4c]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[51]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[53]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[32]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[49]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[38]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[54]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[f0]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[f1]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[40]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c2]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[7e]"></a>ADC_MultiInit</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, admulti.o(i.ADC_MultiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_MultiInit
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializePins
</UL>

<P><STRONG><a name="[6f]"></a>ADC_MultiRead</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, admulti.o(i.ADC_MultiRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_MultiRead
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Controller_ISR
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindTape
</UL>

<P><STRONG><a name="[8]"></a>Beacon_Receiver_ISR</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hardware.o(i.Beacon_Receiver_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Beacon_Receiver_ISR &rArr; PostMasterSM &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMasterSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>CPUgetPRIMASK_cpsid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, es_port_1.o(i.CPUgetPRIMASK_cpsid))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_EnQueueFIFO
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_DeQueue
</UL>

<P><STRONG><a name="[62]"></a>CPUsetPRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, es_port_1.o(i.CPUsetPRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_EnQueueFIFO
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_DeQueue
</UL>

<P><STRONG><a name="[11]"></a>Check4Keystroke</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, eventcheckers.o(i.Check4Keystroke))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Check4Keystroke &rArr; PostMapKeys &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMapKeys
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kbhit
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_checkevents_1.o(.constdata)
</UL>
<P><STRONG><a name="[12]"></a>CheckBumpSwitchEvents</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bumpswitchdebounce.o(i.CheckBumpSwitchEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CheckBumpSwitchEvents &rArr; PostBumpSwitchDebounce &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostBumpSwitchDebounce
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_checkevents_1.o(.constdata)
</UL>
<P><STRONG><a name="[13]"></a>CheckTeamSwitchEvents</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, teamswitchdebounce.o(i.CheckTeamSwitchEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CheckTeamSwitchEvents &rArr; PostTeamSwitchDebounce &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostTeamSwitchDebounce
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_checkevents_1.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>ClearBadResponseCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, checkinsm.o(i.ClearBadResponseCounter))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunConstructingSM
</UL>

<P><STRONG><a name="[7]"></a>EOT_Response_ISR</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, spi_module.o(i.EOT_Response_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EOT_Response_ISR &rArr; PostLOC_SM &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostLOC_SM
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBytesArray
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>ES_CheckUserEvents</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, es_checkevents_1.o(i.ES_CheckUserEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ES_CheckUserEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Run
</UL>

<P><STRONG><a name="[60]"></a>ES_DeQueue</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, es_queue_1.o(i.ES_DeQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ES_DeQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUsetPRIMASK
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUgetPRIMASK_cpsid
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Run
</UL>

<P><STRONG><a name="[63]"></a>ES_EnQueueFIFO</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, es_queue_1.o(i.ES_EnQueueFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUsetPRIMASK
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUgetPRIMASK_cpsid
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_PostToService
</UL>

<P><STRONG><a name="[69]"></a>ES_GetMSBitSet</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, es_lookuptables_1.o(i.ES_GetMSBitSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ES_GetMSBitSet
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Run
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_Tick_Resp
</UL>

<P><STRONG><a name="[66]"></a>ES_InitQueue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, es_queue_1.o(i.ES_InitQueue))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Initialize
</UL>

<P><STRONG><a name="[64]"></a>ES_Initialize</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, es_framework_1.o(i.ES_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ES_Initialize &rArr; ES_Timer_Init &rArr; _HW_Timer_Init &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_InitQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>ES_PostToService</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, es_framework_1.o(i.ES_PostToService))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_EnQueueFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMapKeys
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostReloadingService
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMasterSM
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostLOC_SM
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostTeamSwitchDebounce
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostBumpSwitchDebounce
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostFiringService
</UL>

<P><STRONG><a name="[68]"></a>ES_Run</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, es_framework_1.o(i.ES_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ES_Run &rArr; _HW_Process_Pending_Ints &rArr; ES_Timer_Tick_Resp &rArr; ES_GetMSBitSet
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HW_Process_Pending_Ints
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_GetMSBitSet
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_DeQueue
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_CheckUserEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>ES_Timer_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, es_timers_1.o(i.ES_Timer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ES_Timer_Init &rArr; _HW_Timer_Init &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HW_Timer_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Initialize
</UL>

<P><STRONG><a name="[7c]"></a>ES_Timer_InitTimer</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, es_timers_1.o(i.ES_Timer_InitTimer))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMasterSM
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunShootingSM
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunCheckInSM
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunByteTransferSM
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTeamSwitchDebounceSM
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeTeamSwitchDebounce
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunBumpSwitchDebounceSM
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeBumpSwitchDebounce
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunFiringService
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunReloadingService
</UL>

<P><STRONG><a name="[6d]"></a>ES_Timer_Tick_Resp</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, es_timers_1.o(i.ES_Timer_Tick_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ES_Timer_Tick_Resp &rArr; ES_GetMSBitSet
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_GetMSBitSet
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HW_Process_Pending_Ints
</UL>

<P><STRONG><a name="[6e]"></a>FindTape</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, hardware.o(i.FindTape))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FindTape &rArr; ADC_MultiRead
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_MultiRead
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunConstructingSM
</UL>

<P><STRONG><a name="[71]"></a>GPIODirModeSet</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gpio.o(i.GPIODirModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
</UL>

<P><STRONG><a name="[72]"></a>GPIOPadConfigSet</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, gpio.o(i.GPIOPadConfigSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
</UL>

<P><STRONG><a name="[ba]"></a>GPIOPinConfigure</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMIO_Init
</UL>

<P><STRONG><a name="[70]"></a>GPIOPinTypeGPIOInput</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunctionInit
</UL>

<P><STRONG><a name="[73]"></a>GPIOPinTypeUART</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIOPinTypeUART &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMIO_Init
</UL>

<P><STRONG><a name="[c]"></a>HallEffectOneShotTimer_ISR</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, constructingsm.o(i.HallEffectOneShotTimer_ISR))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>HallEffect_ISR</STRONG> (Thumb, 176 bytes, Stack size 20 bytes, constructingsm.o(i.HallEffect_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HallEffect_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>InitFiringService</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, firingservice.o(i.InitFiringService))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitFiringService
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetServoPosition
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitServoPWM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework_1.o(.constdata)
</UL>
<P><STRONG><a name="[20]"></a>InitLOC_SM</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, loc_hsm.o(i.InitLOC_SM))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InitLOC_SM &rArr; StartLOC_SM &rArr; RunLOC_SM &rArr;  RunLOC_SM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartLOC_SM
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework_1.o(.constdata)
</UL>
<P><STRONG><a name="[14]"></a>InitMapKeys</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mapkeys.o(i.InitMapKeys))
<BR>[Address Reference Count : 1]<UL><LI> es_framework_1.o(.constdata)
</UL>
<P><STRONG><a name="[1e]"></a>InitMasterSM</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, masterhsm.o(i.InitMasterSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = InitMasterSM &rArr; StartMasterSM &rArr; RunMasterSM &rArr;  RunMasterSM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSPI_Comm
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartMasterSM
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializePins
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework_1.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>InitPWM</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, pwm_module.o(i.InitPWM))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializePins
</UL>

<P><STRONG><a name="[1a]"></a>InitReloadingService</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, reloadingservice.o(i.InitReloadingService))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitReloadingService
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_IR_Emitter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework_1.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>InitSPI_Comm</STRONG> (Thumb, 208 bytes, Stack size 0 bytes, spi_module.o(i.InitSPI_Comm))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMasterSM
</UL>

<P><STRONG><a name="[74]"></a>InitServoPWM</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, pwm_module.o(i.InitServoPWM))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFiringService
</UL>

<P><STRONG><a name="[18]"></a>InitializeBumpSwitchDebounce</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, bumpswitchdebounce.o(i.InitializeBumpSwitchDebounce))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitializeBumpSwitchDebounce
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_InitTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework_1.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>InitializePins</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, hardware.o(i.InitializePins))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InitializePins &rArr; ADC_MultiInit
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPWM
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagneticTimerInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Controller
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Beacon_Receiver
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_MultiInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMasterSM
</UL>

<P><STRONG><a name="[16]"></a>InitializeTeamSwitchDebounce</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, teamswitchdebounce.o(i.InitializeTeamSwitchDebounce))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitializeTeamSwitchDebounce
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_InitTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework_1.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>IntMasterEnable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, interrupt.o(i.IntMasterEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HW_Timer_Init
</UL>

<P><STRONG><a name="[d]"></a>Launcher_Controller_ISR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hardware.o(i.Launcher_Controller_ISR))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>Launcher_Encoder_ISR</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hardware.o(i.Launcher_Encoder_ISR))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>Motor_Controller_ISR</STRONG> (Thumb, 462 bytes, Stack size 40 bytes, hardware.o(i.Motor_Controller_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Motor_Controller_ISR &rArr; PostMasterSM &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDutyB
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDutyA
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMasterSM
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_MultiRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>PortFunctionInit</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, enablepa25_pb23_pd7_pf0.o(i.PortFunctionInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PortFunctionInit &rArr; GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26]"></a>PostBumpSwitchDebounce</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bumpswitchdebounce.o(i.PostBumpSwitchDebounce))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PostBumpSwitchDebounce &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_PostToService
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBumpSwitchEvents
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_timers_1.o(.constdata)
</UL>
<P><STRONG><a name="[24]"></a>PostFiringService</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, firingservice.o(i.PostFiringService))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PostFiringService &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_PostToService
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunShootingSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_timers_1.o(.constdata)
</UL>
<P><STRONG><a name="[22]"></a>PostLOC_SM</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, loc_hsm.o(i.PostLOC_SM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PostLOC_SM &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_PostToService
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DuringWaiting2Start
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMapKeys
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLOC_SM
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunShootingSM
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunConstructingSM
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunCheckInSM
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EOT_Response_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_timers_1.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>PostMapKeys</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mapkeys.o(i.PostMapKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PostMapKeys &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_PostToService
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check4Keystroke
</UL>

<P><STRONG><a name="[23]"></a>PostMasterSM</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, masterhsm.o(i.PostMasterSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PostMasterSM &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_PostToService
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMasterSM
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMapKeys
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLOC_SM
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Controller_ISR
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beacon_Receiver_ISR
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunConstructingSM
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTeamSwitchDebounceSM
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunBumpSwitchDebounceSM
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunFiringService
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunReloadingService
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_timers_1.o(.constdata)
</UL>
<P><STRONG><a name="[25]"></a>PostReloadingService</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, reloadingservice.o(i.PostReloadingService))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PostReloadingService &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_PostToService
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunConstructingSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_timers_1.o(.constdata)
</UL>
<P><STRONG><a name="[27]"></a>PostTeamSwitchDebounce</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, teamswitchdebounce.o(i.PostTeamSwitchDebounce))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PostTeamSwitchDebounce &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_PostToService
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTeamSwitchEvents
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_timers_1.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>QueryLOC</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, spi_module.o(i.QueryLOC))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunByteTransferSM
</UL>

<P><STRONG><a name="[19]"></a>RunBumpSwitchDebounceSM</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, bumpswitchdebounce.o(i.RunBumpSwitchDebounceSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RunBumpSwitchDebounceSM &rArr; PostMasterSM &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMasterSM
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_InitTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework_1.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>RunByteTransferSM</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, bytetransfersm.o(i.RunByteTransferSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = RunByteTransferSM &rArr;  RunByteTransferSM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueryLOC
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_InitTimer
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunByteTransferSM
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLOC_SM
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartByteTransferSM
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunByteTransferSM
</UL>

<P><STRONG><a name="[8a]"></a>RunCheckInSM</STRONG> (Thumb, 488 bytes, Stack size 40 bytes, checkinsm.o(i.RunCheckInSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = RunCheckInSM &rArr;  RunCheckInSM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getResponseReady
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReportStatus
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPeriod
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLocation
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRS_Byte
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRR_Byte
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostLOC_SM
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPeriodCode
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunCheckInSM
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_InitTimer
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRS_Byte
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRR_Byte
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunConstructingSM
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCheckInSM
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunCheckInSM
</UL>

<P><STRONG><a name="[5c]"></a>RunConstructingSM</STRONG> (Thumb, 616 bytes, Stack size 40 bytes, constructingsm.o(i.RunConstructingSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = RunConstructingSM &rArr;  RunConstructingSM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTeamColor
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBallCount
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getActiveStageRed
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getActiveStageGreen
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartShootingSM
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDrivingAlongTapeSM
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSB3_Byte
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSB2_Byte
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSB1_Byte
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorController
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFlywheelDuty
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDutyB
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDutyA
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunShootingSM
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunDrivingAlongTapeSM
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostReloadingService
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMasterSM
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindTape
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateStatus
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunConstructingSM
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostLOC_SM
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCheckInSM
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunCheckInSM
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBadResponseCounter
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSB3_Byte
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSB2_Byte
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSB1_Byte
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DuringConstructing
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartConstructingSM
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunConstructingSM
</UL>

<P><STRONG><a name="[9d]"></a>RunDrivingAlongTapeSM</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, drivingalongtapesm.o(i.RunDrivingAlongTapeSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = RunDrivingAlongTapeSM &rArr;  RunDrivingAlongTapeSM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorController
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDutyB
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDutyA
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunDrivingAlongTapeSM
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDrivingAlongTapeSM
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunDrivingAlongTapeSM
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunConstructingSM
</UL>

<P><STRONG><a name="[1d]"></a>RunFiringService</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, firingservice.o(i.RunFiringService))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = RunFiringService &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMasterSM
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_InitTimer
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetServoPosition
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework_1.o(.constdata)
</UL>
<P><STRONG><a name="[21]"></a>RunLOC_SM</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, loc_hsm.o(i.RunLOC_SM))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = RunLOC_SM &rArr;  RunLOC_SM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLOC_SM
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMasterSM
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostLOC_SM
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartByteTransferSM
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunByteTransferSM
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartLOC_SM
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLOC_SM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework_1.o(.constdata)
</UL>
<P><STRONG><a name="[15]"></a>RunMapKeys</STRONG> (Thumb, 606 bytes, Stack size 24 bytes, mapkeys.o(i.RunMapKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = RunMapKeys &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSB3_Byte
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMasterSM
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incrementScore
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRS_Byte
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRR_Byte
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostLOC_SM
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSB3_Byte
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRS_Byte
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework_1.o(.constdata)
</UL>
<P><STRONG><a name="[1f]"></a>RunMasterSM</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, masterhsm.o(i.RunMasterSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = RunMasterSM &rArr;  RunMasterSM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGameState
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMasterSM
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DuringWaiting2Start
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DuringConstructing
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMasterSM
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_InitTimer
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSB3_Byte
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSB2_Byte
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSB1_Byte
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartMasterSM
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMasterSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework_1.o(.constdata)
</UL>
<P><STRONG><a name="[1b]"></a>RunReloadingService</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, reloadingservice.o(i.RunReloadingService))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = RunReloadingService &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incrementBallCount
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBallCount
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMasterSM
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_InitTimer
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_IR_Emitter
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_IR_Emitter
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework_1.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>RunShootingSM</STRONG> (Thumb, 570 bytes, Stack size 40 bytes, shootingsm.o(i.RunShootingSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = RunShootingSM &rArr;  RunShootingSM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrementBallCount
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLastStation
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTeamColor
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getScoreRed
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getScoreGreen
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBallCount
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSB3_Byte
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSB2_Byte
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSB1_Byte
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorController
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFlywheelDuty
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunShootingSM
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGameTimeoutFlag
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTargetGoal
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getScore
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGameTimeoutFlag
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostLOC_SM
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_InitTimer
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSB3_Byte
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSB2_Byte
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSB1_Byte
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostFiringService
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartShootingSM
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunShootingSM
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunConstructingSM
</UL>

<P><STRONG><a name="[17]"></a>RunTeamSwitchDebounceSM</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, teamswitchdebounce.o(i.RunTeamSwitchDebounceSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RunTeamSwitchDebounceSM &rArr; PostMasterSM &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMasterSM
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_InitTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework_1.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>SetBytesArray</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bytetransfersm.o(i.SetBytesArray))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EOT_Response_ISR
</UL>

<P><STRONG><a name="[b5]"></a>SetDirectionA</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, pwm_module.o(i.SetDirectionA))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorController
</UL>

<P><STRONG><a name="[b6]"></a>SetDirectionB</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, pwm_module.o(i.SetDirectionB))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorController
</UL>

<P><STRONG><a name="[84]"></a>SetDutyA</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, pwm_module.o(i.SetDutyA))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetDutyA
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Controller_ISR
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunDrivingAlongTapeSM
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunConstructingSM
</UL>

<P><STRONG><a name="[85]"></a>SetDutyB</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, pwm_module.o(i.SetDutyB))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetDutyB
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Controller_ISR
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunDrivingAlongTapeSM
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunConstructingSM
</UL>

<P><STRONG><a name="[a4]"></a>SetFlywheelDuty</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, pwm_module.o(i.SetFlywheelDuty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetFlywheelDuty
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunShootingSM
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunConstructingSM
</UL>

<P><STRONG><a name="[9f]"></a>SetMotorController</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, hardware.o(i.SetMotorController))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = SetMotorController &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDirectionB
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDirectionA
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunShootingSM
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunDrivingAlongTapeSM
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunConstructingSM
</UL>

<P><STRONG><a name="[8e]"></a>SetRR_Byte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, masterhsm.o(i.SetRR_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMapKeys
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunCheckInSM
</UL>

<P><STRONG><a name="[90]"></a>SetRS_Byte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, masterhsm.o(i.SetRS_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMapKeys
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunCheckInSM
</UL>

<P><STRONG><a name="[95]"></a>SetSB1_Byte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, masterhsm.o(i.SetSB1_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunShootingSM
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunConstructingSM
</UL>

<P><STRONG><a name="[97]"></a>SetSB2_Byte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, masterhsm.o(i.SetSB2_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunShootingSM
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunConstructingSM
</UL>

<P><STRONG><a name="[99]"></a>SetSB3_Byte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, masterhsm.o(i.SetSB3_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMapKeys
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunShootingSM
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunConstructingSM
</UL>

<P><STRONG><a name="[75]"></a>SetServoPosition</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, pwm_module.o(i.SetServoPosition))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunFiringService
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFiringService
</UL>

<P><STRONG><a name="[a7]"></a>StartByteTransferSM</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bytetransfersm.o(i.StartByteTransferSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = StartByteTransferSM &rArr; RunByteTransferSM &rArr;  RunByteTransferSM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunByteTransferSM
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLOC_SM
</UL>

<P><STRONG><a name="[a0]"></a>StartCheckInSM</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, checkinsm.o(i.StartCheckInSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = StartCheckInSM &rArr; RunCheckInSM &rArr;  RunCheckInSM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunCheckInSM
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunConstructingSM
</UL>

<P><STRONG><a name="[5d]"></a>StartConstructingSM</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, constructingsm.o(i.StartConstructingSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = StartConstructingSM &rArr; RunConstructingSM &rArr;  RunConstructingSM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTeamColor
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunConstructingSM
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DuringConstructing
</UL>

<P><STRONG><a name="[9e]"></a>StartDrivingAlongTapeSM</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drivingalongtapesm.o(i.StartDrivingAlongTapeSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = StartDrivingAlongTapeSM &rArr; RunDrivingAlongTapeSM &rArr;  RunDrivingAlongTapeSM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunDrivingAlongTapeSM
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunConstructingSM
</UL>

<P><STRONG><a name="[77]"></a>StartLOC_SM</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, loc_hsm.o(i.StartLOC_SM))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = StartLOC_SM &rArr; RunLOC_SM &rArr;  RunLOC_SM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLOC_SM
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLOC_SM
</UL>

<P><STRONG><a name="[7a]"></a>StartMasterSM</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, masterhsm.o(i.StartMasterSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = StartMasterSM &rArr; RunMasterSM &rArr;  RunMasterSM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMasterSM
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMasterSM
</UL>

<P><STRONG><a name="[a3]"></a>StartShootingSM</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, shootingsm.o(i.StartShootingSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = StartShootingSM &rArr; RunShootingSM &rArr;  RunShootingSM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunShootingSM
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunConstructingSM
</UL>

<P><STRONG><a name="[b7]"></a>SysCtlClockSet</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, sysctl.o(i.SysCtlClockSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysCtlClockSet
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>SysCtlPeripheralEnable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralEnable))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMIO_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunctionInit
</UL>

<P><STRONG><a name="[c1]"></a>SysTickEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(i.SysTickEnable))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HW_Timer_Init
</UL>

<P><STRONG><a name="[c0]"></a>SysTickIntEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(i.SysTickIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HW_Timer_Init
</UL>

<P><STRONG><a name="[6]"></a>SysTickIntHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, es_port_1.o(i.SysTickIntHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[bf]"></a>SysTickPeriodSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, systick.o(i.SysTickPeriodSet))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HW_Timer_Init
</UL>

<P><STRONG><a name="[b8]"></a>TERMIO_GetChar</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, termio_1.o(i.TERMIO_GetChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TERMIO_GetChar &rArr; UARTgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[76]"></a>TERMIO_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, termio_1.o(i.TERMIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TERMIO_Init &rArr; GPIOPinTypeUART &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTClockSourceSet
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLOC_SM
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>TERMIO_PutChar</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, termio_1.o(i.TERMIO_PutChar))
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[be]"></a>UARTCharPut</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(i.UARTCharPut))
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMIO_PutChar
</UL>

<P><STRONG><a name="[bb]"></a>UARTClockSourceSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.UARTClockSourceSet))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMIO_Init
</UL>

<P><STRONG><a name="[bc]"></a>UARTStdioConfig</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, uartstdio_1.o(i.UARTStdioConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UARTStdioConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMIO_Init
</UL>

<P><STRONG><a name="[b9]"></a>UARTgetc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uartstdio_1.o(i.UARTgetc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMIO_GetChar
</UL>

<P><STRONG><a name="[9a]"></a>UpdateStatus</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, constructingsm.o(i.UpdateStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UpdateStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getScoreRed
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getScoreGreen
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getActiveStageRed
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getActiveStageGreen
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunConstructingSM
</UL>

<P><STRONG><a name="[6a]"></a>_HW_Process_Pending_Ints</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, es_port_1.o(i._HW_Process_Pending_Ints))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _HW_Process_Pending_Ints &rArr; ES_Timer_Tick_Resp &rArr; ES_GetMSBitSet
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_Tick_Resp
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Run
</UL>

<P><STRONG><a name="[6c]"></a>_HW_Timer_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, es_port_1.o(i._HW_Timer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _HW_Timer_Init &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickPeriodSet
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntEnable
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickEnable
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_Init
</UL>

<P><STRONG><a name="[44]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget_1.o(i._sys_exit))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[b2]"></a>decrementBallCount</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, masterhsm.o(i.decrementBallCount))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunShootingSM
</UL>

<P><STRONG><a name="[55]"></a>ferror</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget_1.o(i.ferror))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[4e]"></a>fgetc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget_1.o(i.fgetc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fgetc &rArr; TERMIO_GetChar &rArr; UARTgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMIO_GetChar
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>

<P><STRONG><a name="[f]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, retarget_1.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMIO_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[9c]"></a>getActiveStageGreen</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, masterhsm.o(i.getActiveStageGreen))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateStatus
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunConstructingSM
</UL>

<P><STRONG><a name="[9b]"></a>getActiveStageRed</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, masterhsm.o(i.getActiveStageRed))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateStatus
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunConstructingSM
</UL>

<P><STRONG><a name="[a6]"></a>getBallCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, masterhsm.o(i.getBallCount))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunShootingSM
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunConstructingSM
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunReloadingService
</UL>

<P><STRONG><a name="[aa]"></a>getGameState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, masterhsm.o(i.getGameState))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMasterSM
</UL>

<P><STRONG><a name="[b0]"></a>getGameTimeoutFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, constructingsm.o(i.getGameTimeoutFlag))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunShootingSM
</UL>

<P><STRONG><a name="[af]"></a>getLastStation</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drivingalongtapesm.o(i.getLastStation))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunShootingSM
</UL>

<P><STRONG><a name="[93]"></a>getLocation</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, masterhsm.o(i.getLocation))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunCheckInSM
</UL>

<P><STRONG><a name="[8b]"></a>getPeriod</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, constructingsm.o(i.getPeriod))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunCheckInSM
</UL>

<P><STRONG><a name="[8c]"></a>getPeriodCode</STRONG> (Thumb, 244 bytes, Stack size 8 bytes, checkinsm.o(i.getPeriodCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = getPeriodCode &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunCheckInSM
</UL>

<P><STRONG><a name="[8d]"></a>getRR_Byte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bytetransfersm.o(i.getRR_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunCheckInSM
</UL>

<P><STRONG><a name="[8f]"></a>getRS_Byte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bytetransfersm.o(i.getRS_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMapKeys
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunCheckInSM
</UL>

<P><STRONG><a name="[92]"></a>getReportStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, masterhsm.o(i.getReportStatus))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunCheckInSM
</UL>

<P><STRONG><a name="[91]"></a>getResponseReady</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, masterhsm.o(i.getResponseReady))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunCheckInSM
</UL>

<P><STRONG><a name="[94]"></a>getSB1_Byte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bytetransfersm.o(i.getSB1_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMasterSM
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunShootingSM
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunConstructingSM
</UL>

<P><STRONG><a name="[96]"></a>getSB2_Byte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bytetransfersm.o(i.getSB2_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMasterSM
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunShootingSM
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunConstructingSM
</UL>

<P><STRONG><a name="[98]"></a>getSB3_Byte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bytetransfersm.o(i.getSB3_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMasterSM
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMapKeys
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunShootingSM
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunConstructingSM
</UL>

<P><STRONG><a name="[ad]"></a>getScore</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, constructingsm.o(i.getScore))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunShootingSM
</UL>

<P><STRONG><a name="[b4]"></a>getScoreGreen</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, masterhsm.o(i.getScoreGreen))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunShootingSM
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateStatus
</UL>

<P><STRONG><a name="[b3]"></a>getScoreRed</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, masterhsm.o(i.getScoreRed))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunShootingSM
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateStatus
</UL>

<P><STRONG><a name="[ae]"></a>getTargetGoal</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, constructingsm.o(i.getTargetGoal))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunShootingSM
</UL>

<P><STRONG><a name="[a5]"></a>getTeamColor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, masterhsm.o(i.getTeamColor))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunShootingSM
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartConstructingSM
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunConstructingSM
</UL>

<P><STRONG><a name="[ac]"></a>incrementBallCount</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, masterhsm.o(i.incrementBallCount))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunReloadingService
</UL>

<P><STRONG><a name="[a8]"></a>incrementScore</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, constructingsm.o(i.incrementScore))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMapKeys
</UL>

<P><STRONG><a name="[59]"></a>kbhit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, termio_1.o(i.kbhit))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check4Keystroke
</UL>

<P><STRONG><a name="[3f]"></a>main</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, hsmtemplatemain.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = main &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMIO_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunctionInit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Run
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Initialize
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[b1]"></a>setGameTimeoutFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, constructingsm.o(i.setGameTimeoutFlag))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunShootingSM
</UL>

<P><STRONG><a name="[e]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[34]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[f2]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[f3]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[7f]"></a>Init_Beacon_Receiver</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, hardware.o(i.Init_Beacon_Receiver))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializePins
</UL>

<P><STRONG><a name="[7d]"></a>Init_Controller</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, hardware.o(i.Init_Controller))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializePins
</UL>

<P><STRONG><a name="[81]"></a>MagneticTimerInit</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, hardware.o(i.MagneticTimerInit))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializePins
</UL>

<P><STRONG><a name="[5b]"></a>DuringConstructing</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, masterhsm.o(i.DuringConstructing))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = DuringConstructing &rArr; StartConstructingSM &rArr; RunConstructingSM &rArr;  RunConstructingSM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartConstructingSM
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunConstructingSM
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMasterSM
</UL>

<P><STRONG><a name="[5e]"></a>DuringWaiting2Start</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, masterhsm.o(i.DuringWaiting2Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DuringWaiting2Start &rArr; PostLOC_SM &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostLOC_SM
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMasterSM
</UL>

<P><STRONG><a name="[7b]"></a>Disable_IR_Emitter</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, reloadingservice.o(i.Disable_IR_Emitter))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunReloadingService
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitReloadingService
</UL>

<P><STRONG><a name="[ab]"></a>Enable_IR_Emitter</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, reloadingservice.o(i.Enable_IR_Emitter))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunReloadingService
</UL>

<P><STRONG><a name="[3]"></a>NmiSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>FaultISR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>IntDefaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
